[
    {
        "name": "Float.Extra",
        "comment": " Convenience functions for working with `Float` values. Examples assume that\nthis module has been imported using:\n\n    import Float.Extra as Float\n\n@docs equalWithin, interpolateFrom, range\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "equalWithin",
                "comment": " Check if two values are equal within a given tolerance.\n\n    Float.equalWithin 1e-6 1.9999 2.0001\n    --> False\n\n    Float.equalWithin 1e-3 1.9999 2.0001\n    --> True\n\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> Basics.Bool"
            },
            {
                "name": "interpolateFrom",
                "comment": " Interpolate from the first value to the second, based on a parameter that\nranges from zero to one. Passing a parameter value of zero will return the start\nvalue and passing a parameter value of one will return the end value.\n\n    Float.interpolateFrom 5 10 0\n    --> 5\n\n    Float.interpolateFrom 5 10 1\n    --> 10\n\n    Float.interpolateFrom 5 10 0.6\n    --> 8\n\nThe end value can be less than the start value:\n\n    Float.interpolateFrom 10 5 0.1\n    --> 9.5\n\nParameter values less than zero or greater than one can be used to extrapolate:\n\n    Float.interpolateFrom 5 10 1.5\n    --> 12.5\n\n    Float.interpolateFrom 5 10 -0.5\n    --> 2.5\n\n    Float.interpolateFrom 10 5 -0.2\n    --> 11\n\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> Basics.Float"
            },
            {
                "name": "range",
                "comment": " Construct a range of evenly-spaced values given a `start` value, an `end`\nvalue and the number of `steps` to take from the start to the end. The first\nvalue in the returned list will be equal to `start` and the last value will be\nequal to `end`. Note that the number of returned values will be one greater than\nthe number of steps!\n\n    Float.range { start = 0, end = 1, steps = 1 }\n    --> [ 0, 1 ]\n\n    Float.range { start = 0, end = 1, steps = 2 }\n    --> [ 0, 0.5, 1 ]\n\n    Float.range { start = 10, end = 20, steps = 2 }\n    --> [ 10, 15, 20 ]\n\n    Float.range { start = 2, end = 3, steps = 5 }\n    --> [ 2, 2.2, 2.4, 2.6, 2.8, 3 ]\n\nThe start and end values can be in either order:\n\n    Float.range { start = 1, end = 3, steps = 4 }\n    --> [ 1, 1.5, 2, 2.5, 3 ]\n\n    Float.range { start = 3, end = 1, steps = 4 }\n    --> [ 3, 2.5, 2, 1.5, 1 ]\n\nPassing a negative or zero `steps` value will result in an empty list being\nreturned.\n\nIf you need finer control over what values get generated, try combining\n`interpolateFrom` with the various functions in the\n[`elm-1d-parameter`](https://package.elm-lang.org/packages/ianmackenzie/elm-1d-parameter/latest/)\npackage. For example:\n\n    -- Same as using Float.range\n    Parameter1d.steps 5 (Float.interpolateFrom 2 3)\n    --> [ 2, 2.2, 2.4, 2.6, 2.8, 3 ]\n\n    -- Omit the last value\n    Parameter1d.leading 5 (Float.interpolateFrom 2 3)\n    --> [ 2, 2.2, 2.4, 2.6, 2.8 ]\n\n    -- Omit the first value\n    Parameter1d.trailing 5 (Float.interpolateFrom 2 3)\n    --> [ 2.2, 2.4, 2.6, 2.8, 3 ]\n\n",
                "type": "{ start : Basics.Float, end : Basics.Float, steps : Basics.Int } -> List.List Basics.Float"
            }
        ],
        "binops": []
    }
]